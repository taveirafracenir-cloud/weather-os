{
 "nbformat": 5,
 "nbformat_minor": 10,
 "metadata": {
  "kernelspec": {
   "name": "python3",
   "display_name": "Python 3"
  },
  "language_info": {
   "name": "python",
   "version": "3.11"
  }
 },
 "cells": [
  {
   "cell_type": "code",
   "metadata": {},
   "source": [
    "import psutil\n",
    "import requests\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "from IPython.display import clear_output\n",
    "import time"
   ],
   "outputs": []
  },
  {
   "cell_type": "code",
   "metadata": {},
   "source": [
    "API_KEY = 'SUA_CHAVE_OPENWEATHER'\n",
    "CIDADE = 'São Paulo,BR'\n",
    "URL = f'http://api.openweathermap.org/data/2.5/weather?q={CIDADE}&appid={API_KEY}&units=metric'"
   ],
   "outputs": []
  },
  {
   "cell_type": "code",
   "metadata": {},
   "source": [
    "def coletar_status_servidor():\n",
    "    status = {\n",
    "        'CPU (%)': psutil.cpu_percent(interval=1),\n",
    "        'Memória (%)': psutil.virtual_memory().percent,\n",
    "        'Disco (%)': psutil.disk_usage('/').percent,\n",
    "        'Rede (sent MB)': psutil.net_io_counters().bytes_sent / (1024*1024),\n",
    "        'Rede (recv MB)': psutil.net_io_counters().bytes_recv / (1024*1024)\n",
    "    }\n",
    "    try:\n",
    "        bateria = psutil.sensors_battery()\n",
    "        if bateria:\n",
    "            status['Bateria (%)'] = bateria.percent\n",
    "            status['Conectado à energia'] = bateria.power_plugged\n",
    "        else:\n",
    "            status['Bateria (%)'] = 'N/A'\n",
    "            status['Conectado à energia'] = 'N/A'\n",
    "    except:\n",
    "        status['Bateria (%)'] = 'Erro'\n",
    "        status['Conectado à energia'] = 'Erro'\n",
    "    return status"
   ],
   "outputs": []
  },
  {
   "cell_type": "code",
   "metadata": {},
   "source": [
    "def pegar_previsao_tempo():\n",
    "    try:\n",
    "        resposta = requests.get(URL)\n",
    "        dados = resposta.json()\n",
    "        tempo = {\n",
    "            'Temperatura (°C)': dados['main']['temp'],\n",
    "            'Umidade (%)': dados['main']['humidity'],\n",
    "            'Condição': dados['weather'][0]['description'].title()\n",
    "        }\n",
    "        return tempo\n",
    "    except:\n",
    "        return {'Temperatura (°C)': 'Erro', 'Umidade (%)': 'Erro', 'Condição': 'Erro'}"
   ],
   "outputs": []
  },
  {
   "cell_type": "code",
   "metadata": {},
   "source": [
    "historico = []\n",
    "try:\n",
    "    while True:\n",
    "        clear_output(wait=True)\n",
    "        status = coletar_status_servidor()\n",
    "        tempo = pegar_previsao_tempo()\n",
    "        print('=== STATUS DO SERVIDOR ===')\n",
    "        for k, v in status.items():\n",
    "            print(f'{k}: {v}')\n",
    "        print('\\n=== PREVISÃO DO TEMPO ===')\n",
    "        for k, v in tempo.items():\n",
    "            print(f'{k}: {v}')\n",
    "        registro = {**status, **tempo, 'Timestamp': pd.Timestamp.now()}\n",
    "        historico.append(registro)\n",
    "        df = pd.DataFrame(historico)\n",
    "        if len(df) > 1:\n",
    "            df[['CPU (%)','Memória (%)']].plot(title='Uso do Servidor', figsize=(10,4))\n",
    "            plt.show()\n",
    "        if status['CPU (%)'] > 80:\n",
    "            print('⚠️ CPU acima de 80%!')\n",
    "        if status['Memória (%)'] > 80:\n",
    "            print('⚠️ Memória acima de 80%!')\n",
    "        time.sleep(5)\n",
    "except KeyboardInterrupt:\n",
    "    print('Monitoramento encerrado pelo usuário.')"
   ],
   "outputs": []
  }
 ]
}
